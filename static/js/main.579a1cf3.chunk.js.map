{"version":3,"sources":["Task.js","Calender.js","TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","item","text","priority","completed","Calender","onDateClick","day","setState","selectedDate","nextMonth","currentMonth","addMonths","state","prevMonth","subMonths","Date","className","onClick","this","format","days","startDate","startOfWeek","i","push","key","addDays","style","backgroundColor","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","isSameMonth","isSameDay","hasTasks","date1","list","filter","isSameDate","deadline","length","date2","isSameYear","Tasks","map","id","renderHeader","renderDays","renderCells","renderTasks","React","Component","TodoItem","fontStyle","color","textDecoration","type","checked","onChange","handleChange","handleDelete","App","todos","val","bind","handleSubmit","handleText","prevState","todo","event","target","name","value","date","concat","preventDefault","todoItems","align","onSubmit","placeholder","margin","padding","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.579a1cf3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Task(props){\r\n    return (\r\n        <div>\r\n            <h4>\r\n                Task : {props.item.text}\r\n                <br />\r\n                Priority : {props.item.priority}\r\n                <br />\r\n                Status:{props.item.completed ? \"Completed\" : \"Due\" }       \r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task; ","import React from 'react'\r\nimport addMonths from 'date-fns/addMonths'\r\nimport subMonths from 'date-fns/subMonths'\r\nimport { isSameYear,isSameMonth,isSameDay,addDays, format,startOfMonth,endOfMonth,startOfWeek,endOfWeek} from 'date-fns'\r\nimport Task from \"./Task\"\r\n\r\nclass Calender extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            currentMonth : new Date(),\r\n            selectedDate : new Date(),\r\n        };\r\n    }\r\n\r\n    renderHeader(){\r\n        const dateFormat = \"MMMM yyyy\";\r\n  return (\r\n    <div className=\"header row flex-middle\">\r\n      <div className=\"col col-start\">\r\n        <div className=\"icon\" onClick={this.prevMonth}>\r\n          chevron_left\r\n        </div>\r\n      </div>\r\n      <div className=\"col col-center\">\r\n        <span>\r\n          {format(this.state.currentMonth, dateFormat)}\r\n        </span>\r\n      </div>\r\n      <div className=\"col col-end\" onClick={this.nextMonth}>\r\n        <div className=\"icon\">chevron_right</div>\r\n      </div>\r\n    </div>\r\n  );   \r\n    }\r\n\r\n    renderDays(){\r\n        const dateFormat = \"EEEE\" ;\r\n        const days = [];\r\n  let startDate = startOfWeek(this.state.currentMonth);\r\n  for (let i = 0; i < 7; i++) {\r\n    days.push(\r\n      <div className=\"col col-center\" key={i}>\r\n        {format(addDays(startDate, i), dateFormat)}\r\n      </div>\r\n    );\r\n  }\r\n  return <div className=\"days row\">{days}</div>;\r\n    }\r\n\r\n    renderCells(){\r\n        const style = { \r\n          backgroundColor : \"paleturquoise\"\r\n        }\r\n        const { currentMonth, selectedDate } = this.state;\r\n        const monthStart = startOfMonth(currentMonth);\r\n        const monthEnd = endOfMonth(monthStart);\r\n        const startDate = startOfWeek(monthStart);\r\n        const endDate = endOfWeek(monthEnd);\r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n        while (day <= endDate) {\r\n        for (let i = 0; i < 7; i++) {\r\n            formattedDate = format(day, dateFormat);\r\n            const cloneDay = day;\r\n            days.push(\r\n            <div\r\n                className={`col cell ${\r\n                !isSameMonth(day, monthStart)\r\n                    ? \"disabled\"\r\n                    : isSameDay(day, selectedDate) ? \"selected\" : \"\"\r\n                }`}\r\n                key={day}\r\n                onClick={() => this.onDateClick(cloneDay)}\r\n                style = { this.hasTasks(day) ? style : null}\r\n            >\r\n                <span className=\"number\">{formattedDate}</span>\r\n                <span className=\"bg\">{formattedDate}</span>\r\n            </div>\r\n            );\r\n            day = addDays(day, 1);\r\n        }\r\n        rows.push(\r\n            <div className=\"row\" key={day}>\r\n            {days}\r\n            </div>\r\n        );\r\n        days = [];\r\n        }\r\n        return <div className=\"body\">{rows}</div>;\r\n    }\r\n\r\n    hasTasks(date1){\r\n      const arr = this.props.list.filter(item => this.isSameDate(date1,item.deadline));\r\n      if(arr.length >0)\r\n      return true;\r\n      else\r\n      return false;\r\n    }\r\n\r\n    isSameDate(date1,date2){\r\n        return (!isSameYear(date1,date2)?false\r\n        : !isSameMonth(date1, date2)\r\n                    ? false\r\n                    : isSameDay(date1, date2) ? true : false)\r\n    }\r\n\r\n    onDateClick = day =>{\r\n        this.setState({\r\n            selectedDate : day\r\n        });\r\n    }\r\n\r\n    nextMonth =() => {\r\n        this.setState({\r\n            currentMonth : addMonths(this.state.currentMonth,1)\r\n        });\r\n    };\r\n\r\n    prevMonth = () => {\r\n        this.setState({\r\n            currentMonth : subMonths(this.state.currentMonth,1)\r\n        });\r\n    };\r\n\r\n    renderTasks(){\r\n        const Tasks = this.props.list.filter(item => this.isSameDate(item.deadline,this.state.selectedDate)).map(item=> <Task key={item.id} item={item}/>)\r\n        //console.log(Tasks)\r\n        if(Tasks.length >0)\r\n        return <div>{Tasks}</div>\r\n        else\r\n        return <div>NO TASKS FOR THIS DATE :) </div> \r\n    }\r\n\r\n    render(){\r\n        //console.log(this.props)\r\n        return (\r\n            <div className=\"calendar\">\r\n                {this.renderHeader()}\r\n                {this.renderDays()}\r\n                {this.renderCells()}\r\n                {this.renderTasks()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calender","import React from \"react\"\r\n\r\nfunction TodoItem(props) {\r\n    //console.log(props);\r\n    const completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\",\r\n        backgroundColor : '#EEE9E8'\r\n    }\r\n    return (\r\n        <div className=\"todo-item\" style={props.item.completed ? completedStyle: null}>\r\n            <input \r\n                type=\"checkbox\" \r\n                checked={props.item.completed} \r\n                onChange={() => props.handleChange(props.item.id)}\r\n            />\r\n            <h4><p>{props.item.text}</p></h4>\r\n            <div className=\"col col-end\">\r\n            <div className=\"icon\" onClick={() => props.handleDelete(props.item.id)} style={{color:\"red\"}}>clear</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\nimport './App.css';\nimport Calender from './Calender';\nimport './Todo.css';\nimport TodoItem from \"./TodoItem\"\n\nclass App extends React.Component {\n  constructor() {\n      super()\n      this.state = {\n          todos: [],\n          val: \"\",\n          priority: \"Low\",\n          id : 0,\n          deadline: new Date()\n      }\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n      this.handleText = this.handleText.bind(this)\n      this.handleDelete = this.handleDelete.bind(this)\n  }\n  \n  handleDelete(id){\n    this.setState(prevState =>{\n      const todos = prevState.todos.filter(item => item.id!==id);\n      return {todos,};\n    })\n  }\n\n  handleChange(id) {\n      this.setState(prevState => {\n          const updatedTodos = prevState.todos.map(todo => {\n              if (todo.id === id) {\n                  todo.completed = !todo.completed\n              }\n              return todo\n          })\n          return {\n              todos: updatedTodos\n          }\n      })\n  }\n\n\n  handleText(event){\n    const {name, value} = event.target\n        this.setState({\n            [name]: value\n        })\n        //console.log(name+\" \"+value);\n  }\n\n  handleSubmit(event){\n    let date = new Date(this.state.deadline);\n    this.setState(state =>{\n      const todos = state.todos.concat({id: state.id, text: state.val , priority : state.priority ,completed: false,deadline: date})\n      return {\n        todos,\n        val : \"\",\n        id : state.id + 1\n      }\n    })\n    event.preventDefault();\n  }\n\n  render() {      \n      const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleDelete={this.handleDelete} handleChange={this.handleChange}/>)\n      return (\n          <div>\n            <div className=\"col col-center\">\n            <h1>TO-DO APP</h1>\n            </div>\n            <p/>\n            <div align=\"center\">\n          <form onSubmit={this.handleSubmit}>\n            <h2>Enter Task<input name=\"val\" value={this.state.val} onChange={this.handleText} placeholder=\"ENTER YOUR TASK\" style={{margin:\"20px\",padding:\"10px\"}}/>\n            <label>\n           TASK PRIORITY:\n           <select name =\"priority\" value={this.state.priority} onChange={this.handleText}style={{margin:\"20px\",padding:\"10px\"}}>\n             <option value=\"Low\">Low</option>\n             <option value=\"Important\">Important</option>\n           </select>\n         </label>\n         <label>\n           DEADLINE DATE:\n            <input type =\"date\" name=\"deadline\" onChange={this.handleText}/>\n            <input type=\"submit\" value=\"Submit\" style={{margin:\"20px\",padding:\"10px\"}}/>\n          </label>\n          </h2>\n          </form>\n          </div>\n          <p/>\n          <div className=\"todo-list\">\n              {todoItems}\n          </div>\n          <div>\n            <p />\n            <Calender list={this.state.todos}/>\n            </div>\n          </div>\n      )    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}